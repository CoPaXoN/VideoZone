//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34003
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.60310.0
// 
namespace VideoZoneV2.UploadService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UploadFile", Namespace="http://schemas.datacontract.org/2004/07/VideoZoneV2.Web")]
    public partial class UploadFile : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string FileStoreUrlField;
        
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileStoreUrl {
            get {
                return this.FileStoreUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.FileStoreUrlField, value) != true)) {
                    this.FileStoreUrlField = value;
                    this.RaisePropertyChanged("FileStoreUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="", ConfigurationName="UploadService.Upload")]
    public interface Upload {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:Upload/DoUpload", ReplyAction="urn:Upload/DoUploadResponse")]
        System.IAsyncResult BeginDoUpload(string videoname, string username, string filename, string category, string sharedTo, byte[] content, bool append, System.AsyncCallback callback, object asyncState);
        
        VideoZoneV2.UploadService.UploadFile EndDoUpload(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:Upload/DownloadChunk", ReplyAction="urn:Upload/DownloadChunkResponse")]
        System.IAsyncResult BeginDownloadChunk(string DocUrl, long Offset, int BufferSize, System.AsyncCallback callback, object asyncState);
        
        byte[] EndDownloadChunk(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface UploadChannel : VideoZoneV2.UploadService.Upload, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DoUploadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DoUploadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public VideoZoneV2.UploadService.UploadFile Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((VideoZoneV2.UploadService.UploadFile)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DownloadChunkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DownloadChunkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UploadClient : System.ServiceModel.ClientBase<VideoZoneV2.UploadService.Upload>, VideoZoneV2.UploadService.Upload {
        
        private BeginOperationDelegate onBeginDoUploadDelegate;
        
        private EndOperationDelegate onEndDoUploadDelegate;
        
        private System.Threading.SendOrPostCallback onDoUploadCompletedDelegate;
        
        private BeginOperationDelegate onBeginDownloadChunkDelegate;
        
        private EndOperationDelegate onEndDownloadChunkDelegate;
        
        private System.Threading.SendOrPostCallback onDownloadChunkCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public UploadClient() {
        }
        
        public UploadClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UploadClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UploadClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UploadClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<DoUploadCompletedEventArgs> DoUploadCompleted;
        
        public event System.EventHandler<DownloadChunkCompletedEventArgs> DownloadChunkCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult VideoZoneV2.UploadService.Upload.BeginDoUpload(string videoname, string username, string filename, string category, string sharedTo, byte[] content, bool append, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDoUpload(videoname, username, filename, category, sharedTo, content, append, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        VideoZoneV2.UploadService.UploadFile VideoZoneV2.UploadService.Upload.EndDoUpload(System.IAsyncResult result) {
            return base.Channel.EndDoUpload(result);
        }
        
        private System.IAsyncResult OnBeginDoUpload(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string videoname = ((string)(inValues[0]));
            string username = ((string)(inValues[1]));
            string filename = ((string)(inValues[2]));
            string category = ((string)(inValues[3]));
            string sharedTo = ((string)(inValues[4]));
            byte[] content = ((byte[])(inValues[5]));
            bool append = ((bool)(inValues[6]));
            return ((VideoZoneV2.UploadService.Upload)(this)).BeginDoUpload(videoname, username, filename, category, sharedTo, content, append, callback, asyncState);
        }
        
        private object[] OnEndDoUpload(System.IAsyncResult result) {
            VideoZoneV2.UploadService.UploadFile retVal = ((VideoZoneV2.UploadService.Upload)(this)).EndDoUpload(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDoUploadCompleted(object state) {
            if ((this.DoUploadCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DoUploadCompleted(this, new DoUploadCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DoUploadAsync(string videoname, string username, string filename, string category, string sharedTo, byte[] content, bool append) {
            this.DoUploadAsync(videoname, username, filename, category, sharedTo, content, append, null);
        }
        
        public void DoUploadAsync(string videoname, string username, string filename, string category, string sharedTo, byte[] content, bool append, object userState) {
            if ((this.onBeginDoUploadDelegate == null)) {
                this.onBeginDoUploadDelegate = new BeginOperationDelegate(this.OnBeginDoUpload);
            }
            if ((this.onEndDoUploadDelegate == null)) {
                this.onEndDoUploadDelegate = new EndOperationDelegate(this.OnEndDoUpload);
            }
            if ((this.onDoUploadCompletedDelegate == null)) {
                this.onDoUploadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDoUploadCompleted);
            }
            base.InvokeAsync(this.onBeginDoUploadDelegate, new object[] {
                        videoname,
                        username,
                        filename,
                        category,
                        sharedTo,
                        content,
                        append}, this.onEndDoUploadDelegate, this.onDoUploadCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult VideoZoneV2.UploadService.Upload.BeginDownloadChunk(string DocUrl, long Offset, int BufferSize, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDownloadChunk(DocUrl, Offset, BufferSize, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        byte[] VideoZoneV2.UploadService.Upload.EndDownloadChunk(System.IAsyncResult result) {
            return base.Channel.EndDownloadChunk(result);
        }
        
        private System.IAsyncResult OnBeginDownloadChunk(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string DocUrl = ((string)(inValues[0]));
            long Offset = ((long)(inValues[1]));
            int BufferSize = ((int)(inValues[2]));
            return ((VideoZoneV2.UploadService.Upload)(this)).BeginDownloadChunk(DocUrl, Offset, BufferSize, callback, asyncState);
        }
        
        private object[] OnEndDownloadChunk(System.IAsyncResult result) {
            byte[] retVal = ((VideoZoneV2.UploadService.Upload)(this)).EndDownloadChunk(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDownloadChunkCompleted(object state) {
            if ((this.DownloadChunkCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DownloadChunkCompleted(this, new DownloadChunkCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DownloadChunkAsync(string DocUrl, long Offset, int BufferSize) {
            this.DownloadChunkAsync(DocUrl, Offset, BufferSize, null);
        }
        
        public void DownloadChunkAsync(string DocUrl, long Offset, int BufferSize, object userState) {
            if ((this.onBeginDownloadChunkDelegate == null)) {
                this.onBeginDownloadChunkDelegate = new BeginOperationDelegate(this.OnBeginDownloadChunk);
            }
            if ((this.onEndDownloadChunkDelegate == null)) {
                this.onEndDownloadChunkDelegate = new EndOperationDelegate(this.OnEndDownloadChunk);
            }
            if ((this.onDownloadChunkCompletedDelegate == null)) {
                this.onDownloadChunkCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDownloadChunkCompleted);
            }
            base.InvokeAsync(this.onBeginDownloadChunkDelegate, new object[] {
                        DocUrl,
                        Offset,
                        BufferSize}, this.onEndDownloadChunkDelegate, this.onDownloadChunkCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override VideoZoneV2.UploadService.Upload CreateChannel() {
            return new UploadClientChannel(this);
        }
        
        private class UploadClientChannel : ChannelBase<VideoZoneV2.UploadService.Upload>, VideoZoneV2.UploadService.Upload {
            
            public UploadClientChannel(System.ServiceModel.ClientBase<VideoZoneV2.UploadService.Upload> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginDoUpload(string videoname, string username, string filename, string category, string sharedTo, byte[] content, bool append, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[7];
                _args[0] = videoname;
                _args[1] = username;
                _args[2] = filename;
                _args[3] = category;
                _args[4] = sharedTo;
                _args[5] = content;
                _args[6] = append;
                System.IAsyncResult _result = base.BeginInvoke("DoUpload", _args, callback, asyncState);
                return _result;
            }
            
            public VideoZoneV2.UploadService.UploadFile EndDoUpload(System.IAsyncResult result) {
                object[] _args = new object[0];
                VideoZoneV2.UploadService.UploadFile _result = ((VideoZoneV2.UploadService.UploadFile)(base.EndInvoke("DoUpload", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDownloadChunk(string DocUrl, long Offset, int BufferSize, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = DocUrl;
                _args[1] = Offset;
                _args[2] = BufferSize;
                System.IAsyncResult _result = base.BeginInvoke("DownloadChunk", _args, callback, asyncState);
                return _result;
            }
            
            public byte[] EndDownloadChunk(System.IAsyncResult result) {
                object[] _args = new object[0];
                byte[] _result = ((byte[])(base.EndInvoke("DownloadChunk", _args, result)));
                return _result;
            }
        }
    }
}
